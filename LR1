#include <iostream>
#include <string>
#include <map>

using namespace std;

struct Leaks {
	~Leaks() {
		_CrtDumpMemoryLeaks();
	}
};
Leaks l;

class Base {
public:
	string* b;
	Base() = delete;
	Base(string a) {
		b = new string(a);
	}
	Base(const Base& obj) {
		b = new string;
		*b = *obj.b;
	}
	virtual Base* copy() {
		return new Base(*this);
	}
	virtual ~Base() {
		delete b;
	}
};

class Derived :public Base {
public:
	string* d;
	Derived(string a) : Base(a) {
		d = new string(a);
	}
	Derived(const Derived& obj) : Base(obj) {
		d = new string;
		*d = *obj.d;
	}
	Derived* copy() {
		return new Derived(*this);
	}
	~Derived() {
		delete d;
	}
};

struct pred {
	bool operator()(const Base* x1, const Base* x2)const {
		return x1->b < x2->b;
	}
};

class DB {
public:
	map<Base*, string, pred> v;
	DB() {
		Base* b1 = new Base("123");
		v.emplace(b1, *b1->b);
		Derived* d1 = new Derived("111");
		v.emplace(d1, *d1->b);
	}
	DB(const DB& obj) {
		for (map<Base*, string>::const_iterator it = obj.v.begin(); it != obj.v.end(); it++) {
			Base* s = it->first;
			Base* ns = s->copy();
			v.emplace(ns, *ns->b);
			/*v.insert(make_pair(ns, it->second));*/
		}
	}
	~DB() {
		for (map<Base*, string>::iterator it = v.begin(); it != v.end(); ++it) {
			delete it->first;
		}
	}
};

int main() {
	DB db1;
	DB db2 = db1;
	return 0;
}
